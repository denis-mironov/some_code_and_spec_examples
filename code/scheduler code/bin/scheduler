#!/usr/bin/env ruby

require_relative '../config/boot'
require 'rufus-scheduler'

SYNCHRONIZE_CARD_HISTORIES = '<SynchronizeCardHistories>'.freeze
REEXECUTE_LOCKED_FOLDERS   = '<ReexecuteLockedFolders>'.freeze

scheduler = Rufus::Scheduler.new(max_work_threads: 10)

puts 'Scheduler is initiated...'

# Каждый день в 04:00
if ENV.fetch('LOCAL_CARDS_STATEMENT') == "true"
  scheduler.cron '0 4 * * * Asia/Almaty', overlap: false, tag: SYNCHRONIZE_CARD_HISTORIES do
    Log.info "[ESB Plugin Scheduler] #{Time.now} --> Running the job #{SYNCHRONIZE_CARD_HISTORIES}"
    SynchronizeCardsHistories.new.call
  end
end

# Повторно исполняет папку в ESB если документ был залочен, если ESB был недоступен или не найден сервис
# Не отключать настройку!
if ENV.fetch('LOCKED_FOLDER_REEXECUTION') == "true"
  scheduler.every '1m', overlap: false, tag: REEXECUTE_LOCKED_FOLDERS do
    Log.info "[ESB Plugin Scheduler] #{Time.now} --> Running the job #{REEXECUTE_LOCKED_FOLDERS}"
    ReexecuteLockedFolders.new.call
  end
end

Signal.trap('INT') { puts 'going to shutdown ...'; scheduler.shutdown(:wait) }
Signal.trap('TERM') { puts 'going to shutdown ...'; scheduler.shutdown(:wait) }

def scheduler.on_error(job, error)
  Log.error("[ESB Plugin SchedulerError] #{Time.now}. Rufus-scheduler intercepted #{error.inspect} in #{job.opts[:tag]}")
  Log.error "#{error.backtrace}"
end

scheduler.join
